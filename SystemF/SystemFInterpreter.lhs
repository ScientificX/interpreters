\section{Interpretation}

Here the type checker and the evaluator are put together to form an
interpreter.

\begin{code}
  module SystemFInterpreter where

  import LangUtils
  import SystemFEnv
  import SystemFAST
  import SystemFEval
  import SystemFTypesT
\end{code}

The |interpret| function is primarily a command line, testing
function.  It accepts a term and generates an |IO| monad representing
either the error message or value generated by the evaluator.  Most of
the work here is simply getting the output in a reasonably well
formatted form.

\begin{code}
  interpret :: TmLang -> IO ()
  interpret t = case (runTypeof t) of
		(Left (SystemFTypesT.Err y)) ->
		    do{ putStr "Type Error: "
		      ; putStr y; putStr "\n"
		      }
		(Right y) -> case (runEval t []) of
			    (Left (SystemFEval.Err z)) ->
				do{ putStr "Runtime Error: "
				  ; putStr (show z)
				  ; putStr "\n"
				  }
			    (Right z) ->
				do{ putStr "Value: "
				  ; putStr (show z)
				  ; putStr ":: "
				  ; putStr (show y)
				  ; putStr "\n"
				  }
\end{code}

\begin{code}
  t0 = mkTuple [mkTrue,mkFalse]
  t1 = mkTLambda "X"
       (mkLambda "x" (mkTyVar "X")
	(mkVar "x"))
  t2 = mkTLambda "X"
       (mkLambda "x" (mkTyVar "X")
	(mkVar "x"))
  t3 = mkApp
       (mkTApp
	(mkTLambda "X" (mkLambda "x" (mkTyVar "X") (mkVar "x")))
	SystemFTypesT.mkInt)
       (SystemFEval.mkInt 1)
\end{code}